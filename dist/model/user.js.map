{"version":3,"sources":["../../model/user.js"],"names":["wxOpenInfo","userInfo","wxToken","getWxOpenInfo","ctx","Promise","resolve","reject","Object","keys","length","wx","getUserInfo","lang","withCredentials","success","res","getWxCode","login","code","fail","errMsg","getWxOpenId","get","url","wxOpenId","data","openid","auth_type","appid","post","authUserLogin","valid_days","retcode","retinfo","console","log","getCode","tel","bindTelLogin","unionid","authUserUnbindTel","uid","userkey","setUserInfo","params","setWxToken","getWxToken"],"mappings":";;;;;;AAAA;;AACA;;;;;;kBAEe;;AAEb;AACAA,cAAY,EAHC;AAIb;AACAC,YAAU,EALG;AAMb;AACAC,WAAS,EAPI,EAOA;;AAEb;AACAC,eAVa,2BAUI;AAAA;;AACf,QAAIC,MAAM,IAAV;AACA,WAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,UAAIC,OAAOC,IAAP,CAAY,MAAKT,UAAjB,EAA6BU,MAA7B,KAAwC,CAA5C,EAA+CJ,QAAQ,MAAKN,UAAb;AAC/CW,SAAGC,WAAH,CAAe;AACbC,cAAM,OADO;AAEbC,yBAAiB,KAFJ;AAGbC,eAHa,mBAGLC,GAHK,EAGA;AACXZ,cAAIJ,UAAJ,GAAiBgB,IAAIf,QAArB;AACAK,kBAAQF,IAAIJ,UAAZ;AACD;AANY,OAAf;AAQD,KAVM,CAAP;AAWD,GAvBY;;;AAyBb;AACAiB,WA1Ba,uBA0BA;AACX,WAAO,IAAIZ,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtCI,SAAGO,KAAH,CAAS;AACPH,eADO,mBACEC,GADF,EACO;AACZV,kBAAQU,IAAIG,IAAZ;AACD,SAHM;AAIPC,YAJO,gBAIDJ,GAJC,EAII;AACTV,kBAAQU,IAAIK,MAAZ;AACD;AANM,OAAT;AAQD,KATM,CAAP;AAUD,GArCY;;;AAuCb;;;;;AAKAC,aA5Ca,uBA4CAH,IA5CA,EA4CM;AACjB,WAAO,IAAId,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,sBAAMgB,GAAN,CAAU;AACRC,aAAS,WAAIC,QAAb,SAA0BN,IADlB;AAERJ,eAFQ,mBAECC,GAFD,EAEM;AACZV,kBAAQU,IAAIU,IAAJ,CAASA,IAAjB;AACD,SAJO;AAKRN,YALQ,gBAKFJ,GALE,EAKG;AACTT,iBAAOS,IAAIK,MAAX;AACD;AAPO,OAAV;AASD,KAVM,CAAP;AAWD,GAxDY;;;AA0Db;;;;;;AAMAH,OAhEa,iBAgENS,MAhEM,EAgE+C;AAAA,QAA7CC,SAA6C;AAAA,QAAnBC,KAAmB;;AAC1D,WAAO,IAAIxB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,sBAAMuB,IAAN,CAAW;AACTN,aAAK,WAAIO,aADA;AAETL,cAAM;AACJG,sBADI;AAEJF,wBAFI;AAGJC,8BAHI;AAIJI,sBAAY;AAJR,SAFG;AAQTjB,eARS,mBAQAC,GARA,EAQK;AACZA,gBAAMA,IAAIU,IAAV;AACA,cAAIV,IAAIiB,OAAJ,IAAe,CAAnB,EAAsB;AACpB3B,oBAAQU,IAAIU,IAAZ;AACD,WAFD,MAEO;AACLnB,mBAAOS,IAAIkB,OAAX;AACD;AACF,SAfQ;AAgBTd,YAhBS,gBAgBHJ,GAhBG,EAgBE;AACPmB,kBAAQC,GAAR,CAAYpB,GAAZ;AACH;AAlBQ,OAAX;AAoBD,KArBM,CAAP;AAsBD,GAvFY;;;AAyFb;AACAqB,SA1Fa,yBA0FG;AAAA,QAANC,GAAM,QAANA,GAAM;;AACd,WAAO,IAAIjC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,sBAAMuB,IAAN,CAAW;AACTN,aAAK,WAAIa,OADA;AAETX,cAAM,EAACY,QAAD,EAFG;AAGTvB,eAHS,mBAGDC,GAHC,EAGI;AACXV,kBAAQU,IAAIU,IAAZ;AACD;AALQ,OAAX;AAOD,KARM,CAAP;AASD,GApGY;;;AAsGb;;;;;;;;;AASAa,cA/Ga,+BA+G2C;AAAA,QAAzCD,GAAyC,SAAzCA,GAAyC;AAAA,QAApCnB,IAAoC,SAApCA,IAAoC;AAAA,QAA9BQ,MAA8B,SAA9BA,MAA8B;AAAA,QAAtBa,OAAsB,SAAtBA,OAAsB;AAAA,QAAbR,UAAa,SAAbA,UAAa;;AACtD,WAAO,IAAI3B,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,sBAAMuB,IAAN,CAAW;AACTN,aAAK,WAAIe,YADA;AAETb,cAAM;AACJY,kBADI;AAEJnB,oBAFI;AAGJQ,wBAHI;AAIJa,0BAJI;AAKJX,iCALI;AAMJD;AANI,SAFG;AAUTb,eAVS,mBAUAC,GAVA,EAUK;AACZA,gBAAMA,IAAIU,IAAV;AACA,cAAIV,IAAIiB,OAAJ,IAAe,CAAnB,EAAsB;AACpB3B,oBAAQU,IAAIU,IAAZ;AACD,WAFD,MAEO;AACLnB,mBAAOS,IAAIkB,OAAX;AACD;AACF;AAjBQ,OAAX;AAmBD,KApBM,CAAP;AAqBD,GArIY;;;AAuIb;;;;;;;AAOAO,mBA9Ia,oCA8I8B;AAAA,QAAvBC,GAAuB,SAAvBA,GAAuB;AAAA,QAAlBC,OAAkB,SAAlBA,OAAkB;AAAA,QAAThB,MAAS,SAATA,MAAS;;AACzC,WAAO,IAAItB,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,sBAAMuB,IAAN,CAAW;AACTN,aAAK,WAAIiB,iBADA;AAETf,cAAM;AACJgB,kBADI;AAEJf,wBAFI;AAGJgB,0BAHI;AAIJf;AAJI,SAFG;AAQTb,eARS,mBAQAC,GARA,EAQK;AACZA,gBAAMA,IAAIU,IAAV;AACA,cAAIV,IAAIiB,OAAJ,IAAe,CAAnB,EAAsB;AACpB3B,oBAAQU,IAAIU,IAAZ;AACD,WAFD,MAEO;AACLnB,mBAAOS,IAAIkB,OAAX;AACD;AACF;AAfQ,OAAX;AAiBD,KAlBM,CAAP;AAmBD,GAlKY;;;AAoKb;;;;AAIAU,aAxKa,yBAwKa;AAAA,QAAbC,MAAa,uEAAJ,EAAI;;AACxB;AACA;AACA;AACA;AACAV,YAAQC,GAAR,CAAY,aAAZ,EAA2BS,MAA3B;AACA,SAAK5C,QAAL,GAAgB4C,MAAhB;AACD,GA/KY;;;AAiLb;;;;AAIAjC,aArLa,yBAqLE;AACb,WAAO,KAAKX,QAAZ;AACD,GAvLY;;;AAyLb;;;AAGA6C,YA5La,sBA4LD5C,OA5LC,EA4LQ;AACnB,SAAKA,OAAL,GAAeA,OAAf;AACD,GA9LY;;;AAgMb;;;AAGA6C,YAnMa,wBAmMC;AACZ,WAAO,KAAK7C,OAAZ;AACD;AArMY,C","file":"user.js","sourcesContent":["import {url, WX_APP_ID, WX_AUTH_TYPE} from '../config/index';\nimport Utils from '../util/utils';\n\nexport default {\n\n  // 微信开放信息\n  wxOpenInfo: {},\n  // 回收宝账户信息\n  userInfo: {},\n  // 微信票据\n  wxToken: {}, // {openid, unionid}\n\n  // 获取微信用户的 微信开发信息\n  getWxOpenInfo () {\n    let ctx = this;\n    return new Promise((resolve, reject) => {\n      if (Object.keys(this.wxOpenInfo).length !== 0) resolve(this.wxOpenInfo);\n      wx.getUserInfo({\n        lang: 'zh_CN',\n        withCredentials: false,\n        success(res) {\n          ctx.wxOpenInfo = res.userInfo;\n          resolve(ctx.wxOpenInfo)\n        }\n      });\n    });\n  },\n\n  // 获取code\n  getWxCode () {\n    return new Promise((resolve, reject) => {\n      wx.login({\n        success (res) {\n          resolve(res.code);\n        },\n        fail (res) {\n          resolve(res.errMsg);\n        }\n      })\n    })\n  },\n\n  /**\n   * 获取微信openid\n   * @param code\n   * @return {Promise}\n   */\n  getWxOpenId (code) {\n    return new Promise((resolve, reject) => {\n      Utils.get({\n        url: `${ url.wxOpenId }/${code}`,\n        success (res) {\n          resolve(res.data.data);\n        },\n        fail (res) {\n          reject(res.errMsg);\n        }\n      });\n    })\n  },\n\n  /**\n   * @param openid 开发授权id\n   * @param auth_type 授权类型 1：微信公众号、2：微信小程序、3：支付宝 必填\n   * @param appid 第三方应用号/公众号/生活号，可空 必填\n   * @return {Promise}\n   */\n  login (openid, auth_type = WX_AUTH_TYPE, appid = WX_APP_ID) {\n    return new Promise((resolve, reject) => {\n      Utils.post({\n        url: url.authUserLogin,\n        data: {\n          appid,\n          openid,\n          auth_type,\n          valid_days: 0.1\n        },\n        success (res) {\n          res = res.data;\n          if (res.retcode == 0) {\n            resolve(res.data)\n          } else {\n            reject(res.retinfo)\n          }\n        },\n        fail (res) {\n            console.log(res);\n        }\n      })\n    })\n  },\n\n  // 获取手机验证码\n  getCode ({tel}) {\n    return new Promise((resolve, reject) => {\n      Utils.post({\n        url: url.getCode,\n        data: {tel},\n        success(res) {\n          resolve(res.data);\n        }\n      })\n    })\n  },\n\n  /**\n   * 绑定手机号并登录\n   * @param tel 手机号码\n   * @param code\n   * @param openid\n   * @param unionid\n   * @param valid_days\n   * @return {Promise}\n   */\n  bindTelLogin ({tel, code, openid, unionid, valid_days}) {\n    return new Promise((resolve, reject) => {\n      Utils.post({\n        url: url.bindTelLogin,\n        data: {\n          tel,\n          code,\n          openid,\n          unionid,\n          appid: WX_APP_ID,\n          auth_type: WX_AUTH_TYPE,\n        },\n        success (res) {\n          res = res.data;\n          if (res.retcode == 0) {\n            resolve(res.data)\n          } else {\n            reject(res.retinfo);\n          }\n        }\n      })\n    })\n  },\n\n  /**\n   * 已经绑定手机号的用户解绑手机号\n   * @param uid\n   * @param userkey\n   * @param openid\n   * @return {Promise}\n   */\n  authUserUnbindTel ({uid, userkey, openid}) {\n    return new Promise((resolve, reject) => {\n      Utils.post({\n        url: url.authUserUnbindTel,\n        data: {\n          uid,\n          openid,\n          userkey,\n          auth_type: WX_AUTH_TYPE\n        },\n        success (res) {\n          res = res.data;\n          if (res.retcode == 0) {\n            resolve(res.data)\n          } else {\n            reject(res.retinfo);\n          }\n        }\n      })\n    })\n  },\n\n  /**\n   * 将登录后的用户信息存到本地\n   * @param params\n   */\n  setUserInfo (params = {}) {\n    // wx.setStorage({\n    //   key: 'userInfo',\n    //   data: params\n    // });\n    console.log('setUserInfo', params);\n    this.userInfo = params;\n  },\n\n  /**\n   * 获取用户的登录信息\n   * @return {*}\n   */\n  getUserInfo () {\n    return this.userInfo;\n  },\n\n  /**\n   * 设置微信token {openid, unionid}\n   */\n  setWxToken (wxToken) {\n    this.wxToken = wxToken;\n  },\n\n  /**\n   * 获取微信token\n   */\n  getWxToken () {\n    return this.wxToken;\n  },\n}"]}